#!/bin/bash

ROOT_PATH="/home/chroots"
UNION_OVERLAY_DIR="/var/tmpfs"
DISTROS=
SUDO=

VERSION="0.3.0"

DEBIAN_DISTROS="wheezy jessie stretch"
UBUNTU_DISTROS="trusty vivid wily xenial yakkety"

DEBIAN_MIRROR="http://ftp-stud.hs-esslingen.de/debian"
UBUNTU_MIRROR="http://de.archive.ubuntu.com/ubuntu"

#------------------------------------------------------------------------------
debug="n"
verbose="n"
use_color=false
FORCE="n"
HAS_TTY='y'

RED=""
YELLOW=""
GREEN=""
BLUE=""
NORMAL=""

MY_BASE=$( basename $0 )
MY_REAL_PATH=$( readlink --canonicalize-existing $0 )
MY_DIR=$( dirname "${MY_REAL_PATH}" )
BASE_DIR=$( dirname "${MY_DIR}" )
PUB_KEY_FILE_BASE="repo.uhu-banane.de.gpg-key2.pub"
PUB_KEY_FILE="${BASE_DIR}/keys/${PUB_KEY_FILE_BASE}"
FB_KEY_FILE_REL="/etc/apt/repo.uhu-banane.de.gpg-key2.pub"

#########################################
# Some often used funktions

#------------------------------------------------------------------------------
my_date() {
    date +'%F %T.%N %:::z'
}

#------------------------------------------------------------------------------
debug() {
    if [[ "${VERBOSE}" != "y" ]] ; then
        return
    fi
    echo -e " * [$(my_date)] [${MY_BASE}:DEBUG]: $@"
}

#------------------------------------------------------------------------------
show_cmd() {
    if [[ "${VERBOSE}" != "y" ]] ; then
        return
    fi
    echo -e "   $*"
}

#------------------------------------------------------------------------------
info() {
    if [[ "${QUIET}" = "y" ]] ; then
        return
    fi
    echo -e " ${GREEN}*${NORMAL} [$(my_date)] [${MY_BASE}:${GREEN}INFO${NORMAL}] : $@"
}

#------------------------------------------------------------------------------
warn() {
    echo -e " ${YELLOW}*${NORMAL} [$(my_date)] [${MY_BASE}:${YELLOW}WARN${NORMAL}] : $@" >&2
}

#------------------------------------------------------------------------------
error() {
    echo -e " ${RED}*${NORMAL} [$(my_date)] [${MY_BASE}:${RED}ERROR${NORMAL}]: $@" >&2
}

#------------------------------------------------------------------------------
RM() {
    if [[ "${verbose}" = "y" ]] ; then
        ${SUDO} rm -v "$@"
    else
        ${SUDO} rm "$@"
    fi
}

#------------------------------------------------------------------------------
CP() {
    if [[ "${verbose}" = "y" ]] ; then
        ${SUDO} cp -v "$@"
    else
        ${SUDO} cp "$@"
    fi
}

#------------------------------------------------------------------------------
MKDIR() {
    if [[ "${verbose}" = "y" ]] ; then
        ${SUDO} mkdir -v "$@"
    else
        ${SUDO} mkdir "$@"
    fi
}

#------------------------------------------------------------------------------
set_colors() {

    local safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
    local match_lhs=""
    use_color=false
    [[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
    [[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
    [[ -z ${match_lhs}    ]] \
        && type -P dircolors >/dev/null \
        && match_lhs=$(dircolors --print-database)
    [[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color="true"


    # console colors:
    if ${use_color}; then
        RED="\033[38;5;196m"
        YELLOW="\033[38;5;226m"
        GREEN="\033[38;5;46m"
        BLUE="\033[38;5;27m"
        NORMAL="\033[39m"
    fi

    local my_tty=$(tty)
    if [[ "${my_tty}" =~ 'not a tty' ]] ; then
        my_tty='-'
    fi

    if [[ "${my_tty}" = '-' || "${safe_term}" = "dump" ]] ; then
        HAS_TTY='n'
    fi

}

CHROOT_INI_DEBIAN=$( cat <<-END
	[{{chroot}}]
	type=directory
	description={{vendor}} {{distro}} amd64 autobuilder
	directory={{path}}
	groups=root,sbuild
	root-groups=root,sbuild
	profile=sbuild
	source-groups=root,sbuild
	source-root-groups=root,sbuild
	union-type=overlay
	union-overlay-directory=${UNION_OVERLAY_DIR}
	END
)

CHROOT_INI_UBUNTU=$( cat <<-END
	[{{chroot}}]
	type=directory
	description={{vendor}} {{distro}} amd64 autobuilder
	directory={{path}}
	groups=root,sbuild
	root-groups=root,sbuild
	profile=sbuild
	source-groups=root,sbuild
	source-root-groups=root,sbuild
	union-type=overlay
	union-overlay-directory=${UNION_OVERLAY_DIR}
	END
)

SRC_LIST_DEBIAN=$( cat <<-END
	deb	http://ftp-stud.hs-esslingen.de/debian	{{distro}}		main non-free contrib

	deb	http://security.debian.org/		{{distro}}/updates		main contrib non-free

	# {{distro}}-updates, previously known as 'volatile'
	deb	http://ftp-stud.hs-esslingen.de/debian/	{{distro}}-updates		main contrib non-free

	END
)

SRC_LIST_DEBIAN_BACKPORTS=$( cat <<-END
	# {{distro}}-backports, previously on backports.debian.org
	deb	http://ftp-stud.hs-esslingen.de/debian/	{{distro}}-backports	main contrib non-free

	END
)

SRC_LIST_UBUNTU=$( cat <<-END
	deb	http://ftp-stud.hs-esslingen.de/ubuntu	{{distro}}		main restricted universe multiverse

	# {{distro}}-updates
	deb	http://ftp-stud.hs-esslingen.de/ubuntu/	{{distro}}-updates		main restricted universe multiverse

	# {{distro}}-backports
	deb	http://ftp-stud.hs-esslingen.de/ubuntu/	{{distro}}-backports	main restricted universe multiverse

	END
)

SRC_LIST_DEBIAN_FB=$( cat <<-END
	# Packages Frank Brehm
	# ---------------------

	deb	http://repo.uhu-banane.de/Debian/{{distro}}    ./
	deb-src	http://repo.uhu-banane.de/Sources       ./
	END
)

SRC_LIST_UBUNTU_FB=$( cat <<-END
	# Packages Frank Brehm
	# ---------------------

	deb	http://repo.uhu-banane.de/Ubuntu/{{distro}}    ./
	deb-src	http://repo.uhu-banane.de/Sources       ./
	END
)

#------------------------------------------------------------------------------
usage() {
    cat <<EOF
Usage: ${MY_BASE} [-d|--debug] [-v|--verbose] [-f|--force] [-R PATH] [DISTRO ...]
       ${MY_BASE} [-h|--help]
       ${MY_BASE} [-V|--version]

    Generates a new schroot images

    Options:
        -R|--root PATH  Root path of generated images (default: '${ROOT_PATH}')
        -d|--debug      Debug output (bash -x)
        -v|--verbose    Set verbosity on.
        -f|--force      Force execution, overriding existing chroot directory.
        -h|--help       Show this output and exit
        -V|--version    Prints out version number of the script and exit
EOF
}


#------------------------------------------------------------------------------
do_cmd_line_opts() {

    set +e
    local temp=$( getopt -o R:dvfhV \
                    --long root:,debug,verbose,force,help,version \
                    -n "${MY_BASE}" -- "$@" )
    if [[ $? != 0 ]] ; then
        echo "" >&2
        usage >&2
        exit 1
    fi
    set -e

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$temp"

    while true ; do
        case "$1" in
            -R|--root)
                ROOT_PATH="$2"
                shift 2
                ;;
            -d|--debug)
                debug="y"
                shift
                ;;
            -v|--verbose)
                verbose="y"
                shift
                ;;
            -f|--force)
                FORCE="y"
                shift
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            -V|--version)
                echo "${MY_BASE} version: ${VERSION}"
                exit 0
                ;;
            --) shift
                break
                ;;
            *)  echo "Internal parse error, wrong parameter $1" >&2
                exit 1
                ;;
        esac
    done

    if [[ "${debug}" = "y" ]] ; then
        set -x
    fi

    if [[ $( id -u ) != "0" ]] ; then
        SUDO="sudo"
    fi

    if [[ "$#" -gt "0" ]] ; then
        DISTROS="$*"
    fi

    if [[ -n "${DISTROS}" ]] ; then
        local target_distro=
        local distro=
        local found="n"
        for target_distro in ${DISTROS} ; do
            for distro in ${DEBIAN_DISTROS} ; do
                if [[ "${distro}" = "${target_distro}" ]] ; then
                    found="y"
                    break
                fi
            done
            if [[ "${found}" = "y" ]] ; then
                continue
            fi
            for distro in ${UBUNTU_DISTROS} ; do
                if [[ "${distro}" = "${target_distro}" ]] ; then
                    found="y"
                    break
                fi
            done
            if [[ "${found}" = "y" ]] ; then
                continue
            fi
            echo "Distribution '${target_distro}' not found."
            exit 1
        done
    fi

    if [[  ! -d "${ROOT_PATH}" ]] ; then
        echo "Root directory '${ROOT_PATH}' not found." >&2
        exit 1
    fi

    info "Program base directory is '${GREEN}${BASE_DIR}${NORMAL}'."

    if [[ ! -f "${PUB_KEY_FILE}" ]] ; then
        error "File '${RED}${PUB_KEY_FILE}${NORMAL}' not found."
        exit 2
    fi
    info "File for the key of my public Debian repo is '${GREEN}${PUB_KEY_FILE}${NORMAL}'."

}

#------------------------------------------------------------------------------
do_debian() {

    local do_distros=""
    local distro
    local target_distro
    if [[ -n "${DISTROS}" ]] ; then
        for target_distro in ${DISTROS} ; do
            for distro in ${DEBIAN_DISTROS} ; do
                if [[ "${distro}" = "${target_distro}" ]] ; then
                    if [[ -n "${do_distros}" ]] ; then
                        do_distros="${do_distros} "
                    fi
                    do_distros="${do_distros}${distro}"
                fi
            done
        done
    else
        do_distros="${DEBIAN_DISTROS}"
    fi

    if [[ -z "${do_distros}" ]] ; then
        return
    fi

    for distro in ${do_distros} ; do

        local chroot="fb-${distro}"
        local path="${ROOT_PATH}/${chroot}"
        local ini_file="/etc/schroot/chroot.d/${chroot}"
        local sources_list="${path}/etc/apt/sources.list"
        local fb_key_file_abs="${path}${FB_KEY_FILE_REL}"
        local sources_list_dir="${path}/etc/apt/sources.list.d"
        local sources_list_fb="${sources_list_dir}/fbrehm.list"

        echo
        echo "--------------------------------------------------------------------------"
        info "Performing ${GREEN}Debian ${distro}${NORMAL} ..."

        if [[ ! -d "${path}" ]] ; then
            ${SUDO} sbuild-createchroot --components=main,non-free,contrib "${distro}" "${path}" "${DEBIAN_MIRROR}" || continue
            RM -f "/etc/schroot/chroot.d/${distro}-amd64-sbuild-"*
            echo
        fi

        info "Updating ${GREEN}${ini_file}${NORMAL} ..."
        echo "${CHROOT_INI_DEBIAN}" | \
            sed -e "s/{{chroot}}/${chroot}/g" \
                -e "s|{{path}}|${path}|g"  \
                -e "s/{{distro}}/${distro}/g" \
                -e "s/{{vendor}}/Debian/g" | \
            ${SUDO} tee "${ini_file}" >/dev/null

        info "Updating '${GREEN}${sources_list}${NORMAL}' ..."
        echo "${SRC_LIST_DEBIAN}" | \
            sed -e "s/{{distro}}/${distro}/g" | \
                ${SUDO} tee "${sources_list}" >/dev/null
        echo "" | ${SUDO} tee -a "${sources_list}" >/dev/null

        if [[ "${distro}" != "stretch" ]] ; then
            info "Updating '${GREEN}${sources_list}${NORMAL}' for backports ..."
            echo "${SRC_LIST_DEBIAN_BACKPORTS}" | \
                sed -e "s/{{distro}}/${distro}/g" | \
                    ${SUDO} tee -a "${sources_list}" >/dev/null
            echo "" | ${SUDO} tee -a "${sources_list}" >/dev/null
        fi

        info "Installing '${GREEN}gnupg${NORMAL}' ..."
        schroot -c source:${chroot} -u root -d /root -- bash -c "apt-get install -y gnupg"

        info "Creating '${GREEN}${sources_list_fb}${NORMAL}' ..."
        if [[ ! -d "${sources_list_dir}" ]] ; then
            MKDIR -p "${sources_list_dir}"
        fi
        echo "${SRC_LIST_DEBIAN_FB}" | \
            sed -e "s/{{distro}}/${distro}/g" | \
            ${SUDO} tee -a "${sources_list_fb}" >/dev/null

        info "Creating '${GREEN}${fb_key_file_abs}${NORMAL}' ..."
        CP "${PUB_KEY_FILE}" "${fb_key_file_abs}"

        info "Adding APT key '${GREEN}${FB_KEY_FILE_REL}${NORMAL}' ..."
        schroot -c source:${chroot} -u root -d /root -- bash -c "apt-key add \"${FB_KEY_FILE_REL}\""

        info "Updating APT in '${GREEN}${chroot}${NORMAL}' ..."
        schroot -c source:${chroot} -u root -d /root -- bash -c "apt-get update && apt-get clean"

    done

}

#------------------------------------------------------------------------------
do_ubuntu() {

    local do_distros=""
    local distro
    local target_distro
    if [[ -n "${DISTROS}" ]] ; then
        for target_distro in ${DISTROS} ; do
            for distro in ${UBUNTU_DISTROS} ; do
                if [[ "${distro}" = "${target_distro}" ]] ; then
                    if [[ -n "${do_distros}" ]] ; then
                        do_distros="${do_distros} "
                    fi
                    do_distros="${do_distros}${distro}"
                fi
            done
        done
    else
        do_distros="${UBUNTU_DISTROS}"
    fi

    if [[ -z "${do_distros}" ]] ; then
        return
    fi

    for distro in ${do_distros} ; do

        local chroot="fb-${distro}"
        local path="${ROOT_PATH}/${chroot}"
        local ini_file="/etc/schroot/chroot.d/${chroot}"
        local sources_list="${path}/etc/apt/sources.list"
        local fb_key_file_abs="${path}${FB_KEY_FILE_REL}"
        local sources_list_dir="${path}/etc/apt/sources.list.d"
        local sources_list_fb="${sources_list_dir}/fbrehm.list"

        echo
        echo "--------------------------------------------------------------------------"
        info "Performing ${GREEN}Debian ${distro}${NORMAL} ..."

        if [[ ! -d "${path}" ]] ; then
            ${SUDO} sbuild-createchroot --components=main,universe "${distro}" "${path}" "${UBUNTU_MIRROR}" || continue
            RM -f "/etc/schroot/chroot.d/${distro}-amd64-sbuild-"*
            echo
        fi

        info "Updating '${GREEN}${sources_list}${NORMAL}' ..."
        echo "${CHROOT_INI_UBUNTU}" | \
            sed -e "s/{{chroot}}/${chroot}/g" \
                -e "s|{{path}}|${path}|g"  \
                -e "s/{{distro}}/${distro}/g" \
                -e "s/{{vendor}}/Debian/g" | \
            ${SUDO} tee "${ini_file}" >/dev/null

        info "Updating '${GREEN}${sources_list}${NORMAL}' ..."
        echo "${SRC_LIST_UBUNTU}" | \
            sed -e "s/{{distro}}/${distro}/g" | \
                ${SUDO} tee "${sources_list}" >/dev/null
        echo "" | ${SUDO} tee -a "${sources_list}" >/dev/null

        info "Creating '${GREEN}${sources_list_fb}${NORMAL}' ..."
        if [[ ! -d "${sources_list_dir}" ]] ; then
            MKDIR -p "${sources_list_dir}"
        fi
        echo "${SRC_LIST_UBUNTU_FB}" | \
            sed -e "s/{{distro}}/${distro}/g" | \
            ${SUDO} tee -a "${sources_list_fb}" >/dev/null

        info "Installing '${GREEN}gnupg${NORMAL}' ..."
        schroot -c source:${chroot} -u root -d /root -- bash -c "apt-get install -y gnupg"

        info "Creating '${GREEN}${fb_key_file_abs}${NORMAL}' ..."
        CP "${PUB_KEY_FILE}" "${fb_key_file_abs}"

        info "Adding APT key '${GREEN}${FB_KEY_FILE_REL}${NORMAL}' ..."
        schroot  -c source:${chroot} -u root -d /root -- bash -c "apt-key add \"${FB_KEY_FILE_REL}\""

        info "Updating APT in '${GREEN}${chroot}${NORMAL}' ..."
        schroot  -c source:${chroot} -u root -d /root -- bash -c "apt-get update && apt-get clean"

    done

}

#------------------------------------------------------------------------------
set_colors
do_cmd_line_opts "$@"

if [[ ! -d "${UNION_OVERLAY_DIR}" ]] ; then
    echo "Creating '${UNION_OVERLAY_DIR}' ..."
    MKDIR -p "${UNION_OVERLAY_DIR}" || exit $?
fi

do_debian
do_ubuntu

echo
echo "--------------------------------------------------------------------------"
echo -e "[$(date)]: ${GREEN}Finished${NORMAL}."


# vim: ts=4 et softtabstop=4
